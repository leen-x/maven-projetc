package com.leenx.learn.mavenproject.thrift;

/**
 * Autogenerated by Thrift Compiler (0.14.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2021-08-02")
public class Pair implements org.apache.thrift.TBase<Pair, Pair._Fields>, java.io.Serializable, Cloneable, Comparable<Pair> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pair");

    private static final org.apache.thrift.protocol.TField VALUE1_FIELD_DESC = new org.apache.thrift.protocol.TField("value1", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField VALUE2_FIELD_DESC = new org.apache.thrift.protocol.TField("value2", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PairStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PairTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable
    String value1; // required
    public @org.apache.thrift.annotation.Nullable
    String value2; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        VALUE1((short) 1, "value1"),
        VALUE2((short) 2, "value2");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // VALUE1
                    return VALUE1;
                case 2: // VALUE2
                    return VALUE2;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VALUE1, new org.apache.thrift.meta_data.FieldMetaData("value1", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.VALUE2, new org.apache.thrift.meta_data.FieldMetaData("value2", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pair.class, metaDataMap);
    }

    public Pair() {
    }

    public Pair(
            String value1,
            String value2) {
        this();
        this.value1 = value1;
        this.value2 = value2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Pair(Pair other) {
        if (other.isSetValue1()) {
            this.value1 = other.value1;
        }
        if (other.isSetValue2()) {
            this.value2 = other.value2;
        }
    }

    public Pair deepCopy() {
        return new Pair(this);
    }

    @Override
    public void clear() {
        this.value1 = null;
        this.value2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getValue1() {
        return this.value1;
    }

    public Pair setValue1(@org.apache.thrift.annotation.Nullable String value1) {
        this.value1 = value1;
        return this;
    }

    public void unsetValue1() {
        this.value1 = null;
    }

    /**
     * Returns true if field value1 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetValue1() {
        return this.value1 != null;
    }

    public void setValue1IsSet(boolean value) {
        if (!value) {
            this.value1 = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getValue2() {
        return this.value2;
    }

    public Pair setValue2(@org.apache.thrift.annotation.Nullable String value2) {
        this.value2 = value2;
        return this;
    }

    public void unsetValue2() {
        this.value2 = null;
    }

    /**
     * Returns true if field value2 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetValue2() {
        return this.value2 != null;
    }

    public void setValue2IsSet(boolean value) {
        if (!value) {
            this.value2 = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
            case VALUE1:
                if (value == null) {
                    unsetValue1();
                } else {
                    setValue1((String) value);
                }
                break;

            case VALUE2:
                if (value == null) {
                    unsetValue2();
                } else {
                    setValue2((String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case VALUE1:
                return getValue1();

            case VALUE2:
                return getValue2();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case VALUE1:
                return isSetValue1();
            case VALUE2:
                return isSetValue2();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof Pair)
            return this.equals((Pair) that);
        return false;
    }

    public boolean equals(Pair that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_value1 = true && this.isSetValue1();
        boolean that_present_value1 = true && that.isSetValue1();
        if (this_present_value1 || that_present_value1) {
            if (!(this_present_value1 && that_present_value1))
                return false;
            if (!this.value1.equals(that.value1))
                return false;
        }

        boolean this_present_value2 = true && this.isSetValue2();
        boolean that_present_value2 = true && that.isSetValue2();
        if (this_present_value2 || that_present_value2) {
            if (!(this_present_value2 && that_present_value2))
                return false;
            if (!this.value2.equals(that.value2))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetValue1()) ? 131071 : 524287);
        if (isSetValue1())
            hashCode = hashCode * 8191 + value1.hashCode();

        hashCode = hashCode * 8191 + ((isSetValue2()) ? 131071 : 524287);
        if (isSetValue2())
            hashCode = hashCode * 8191 + value2.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Pair other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetValue1(), other.isSetValue1());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValue1()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value1, other.value1);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetValue2(), other.isSetValue2());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValue2()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value2, other.value2);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Pair(");
        boolean first = true;

        sb.append("value1:");
        if (this.value1 == null) {
            sb.append("null");
        } else {
            sb.append(this.value1);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("value2:");
        if (this.value2 == null) {
            sb.append("null");
        } else {
            sb.append(this.value2);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (value1 == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'value1' was not present! Struct: " + toString());
        }
        if (value2 == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'value2' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class PairStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public PairStandardScheme getScheme() {
            return new PairStandardScheme();
        }
    }

    private static class PairStandardScheme extends org.apache.thrift.scheme.StandardScheme<Pair> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Pair struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // VALUE1
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.value1 = iprot.readString();
                            struct.setValue1IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // VALUE2
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.value2 = iprot.readString();
                            struct.setValue2IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Pair struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.value1 != null) {
                oprot.writeFieldBegin(VALUE1_FIELD_DESC);
                oprot.writeString(struct.value1);
                oprot.writeFieldEnd();
            }
            if (struct.value2 != null) {
                oprot.writeFieldBegin(VALUE2_FIELD_DESC);
                oprot.writeString(struct.value2);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PairTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public PairTupleScheme getScheme() {
            return new PairTupleScheme();
        }
    }

    private static class PairTupleScheme extends org.apache.thrift.scheme.TupleScheme<Pair> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Pair struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.value1);
            oprot.writeString(struct.value2);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Pair struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.value1 = iprot.readString();
            struct.setValue1IsSet(true);
            struct.value2 = iprot.readString();
            struct.setValue2IsSet(true);
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

